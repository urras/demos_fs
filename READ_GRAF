


















                ПАКЕТ ГРАФИЧЕСКИХ ФУНКЦИЙ ДЛЯ ПЭВМ ДВК-4















































                                 - 2 -


                               СОДЕРЖАНИЕ


         Введение                                              3

      1. Общие замечания                                       4

      2. Спецификации функций                                  4

      3. Перечень нереализованных функций графического пакета

	 фирмы "Borland International"                        12

      4. Трансляция   программ,  использующих

	 пакет   графических   функций                        12


















































                                 - 3 -


                                Введение


          Эффективное использование ПЭВМ (персональных  ЭВМ)  вряд

      ли  возможно без развитых средств машинной графики для раст-

      ровых дисплеев. Растровые дисплеи - наиболее  распространен-

      ный тип устройств, на которых графические изображения форми-

      руются из совокупности точек растра (пикселов). Таким  обра-

      зом  экран  дисплея  можно  представлять в виде координатной

      сетки, где каждой точке графика  соответствует  определенный

      пиксел экрана. Для черно-белых дисплеев характеристикой пик-

      села является свечение, для цветных - цвет из некоторой  па-

      литры.  Аппаратная поддержка растра различна на разных ПЭВМ.

      Для IBM PC, например, контроллер графического дисплея  нахо-

      дится на общей шине, что позволяет "привязать" экран дисплея

      к конкретному полю физических адресов, так называемому  бит-

      мэпу  (bitmap). В таком случае каждому пикселу на экране со-

      ответствует набор битов по конкретному  физическому  адресу.

      Количество битов в наборе определяет количество одновременно

      возможных цветов на экране дисплея. Через  битмэп  организо-

      вана   также   работа   с  графикой  на  отечественной  ПЭВМ

      "Электроника-85".

          Наличие  битмэпа   существенно   расширяет   возможности

      средств  графики.  В частности экран становится доступным по

      "чтению", упрощается  реализация  движущихся  изображений  и

      т.д. Другие отечественные ПЭВМ, такие как ДВК-4, не обладают

      механизмом битмэпа, и графические возможности реализуются  в

      них  через  вывод  специальных последовательностей буквенно-

      цифровой информации, называемых escape-последовательностями.

      Подобный  способ существенно сужает графические возможности,

      т.к. теряется или сильно затрудняется обратная связь с экра-

      ном, замедляется скорость работы для графических функций, не

      имеющих аналогов среди escape-последовательностей.  Делается

                                 - 4 -


      также  практически  невозможной  работа  с пользовательскими

      шрифтами,  задаваемыми  программно  пользователем.  В  ДВК-4

      escape-последовательности исполняются контроллером цифрового

      графического дисплея (КЦГД). При выводе специального символа

      включается  режим исполнения этих последовательностей, кото-

      рые интерпретируются как графические команды работы с  экра-

      ном дисплея.


                           1. Общие замечания


          При реализации графического пакета на ПЭВМ ДВК-4 в  сис-

      теме  Демос  был взят за основу графический пакет фирмы Bor-

      land International на IBM-PC для MS DOS. Исходный пакет нас-

      читывает около восьмидесяти функций, некоторые из которых не

      удалось реализовать. В главе 4 дается перечень нереализован-

      ных  функций.  В главе 3 описываются все функции, включенные

      во вновь созданный пакет. Перечень функций дается в алфавит-

      ном  порядке.  Для  функций, не вырабатывающих значение, ре-

      зультат исполнения можно получить  с  помощью  функции  gra-

      phresult.  Типы  ошибок  описаны в соответствующем пользова-

      тельском "include" - файле(/usr/include/graphics.h).


                        2. Спецификации функций


          Параметры-координаты функций задают пиксел в  координат-

      ной  системе  с осями Х, У и центром в левом нижнем углу эк-

      рана. Размер экрана задан в файле /usr/include/graphics.h  в

      переменных XSIZE, YSIZE.


          arc (x, y, stangle, endangle, radius)
          int x, y,  stangle, endangle, radius;

          Рисуется тeкущим цветом  дуга  окружности  с  центром  в

      точке  (х, у), начальным углом к оси х stangle, конечным уг-

      лом endangle и радиусом radius.


                                 - 5 -


          bar (left, bottom, right, top)
          int left, bottom, right, top;

          Рисуется закрашенный текущим цветом прямоугольник с  ко-

      ординатами  нижнего  левого  угла  (left,  bottom) и правого

      верхнего (right, top).


          bar3d(left, bottom, right, top, depth, topflag)
          int left, bottom, right, top, depth, topflag;

          Рисуется текущим цветом параллелепипед с закрашенной пе-

      редней  гранью.  Параметр depth задает глубину контура. Если

      topflag=TRUE, то  верхняя  грань  параллелепипеда  рисуется,

      если topflag=FALSE, то нет. Это позволяет рисовать несколько

      параллелепипедов один на другом.


          circle (x, y, radius)
          int x, y, radius;

	  Рисуется  текущим  цветом  окружность  с  центром  в

       точке (х,у) и радиусом radius.


          cleardevice ( )

          Процедура очищает  и  подготавливает  для  вывода  экран

      дисплея.


          clearviewport ( )

          Процедура очищает текущее окно, установленное процедурой

      setviewport.


          closegraph ( )

          Процедура закрывает графический  режим  и  устанавливает

      исходные режимы терминала.


          drawpoly (numpoints, polypoints)
          int numpoints, int *polypoints;

          Процедура рисует контур многоугольника, используя  теку-

      щий  цвет и стиль линии. Первый параметр задает число вершин

      многоугольника.  Второй параметр - указатель на массив коор-


                                 - 6 -


      динат.  Нулевой  и первый элементы массива задают координату

      (x, y) первой вершины, второй и третий - второй и т.д.   Для

      вычерчивания  замкнутой  фигуры  с n вершинами надо задавать

      n+1 координату, где n+1 координата совпадает с первой.


          ellipse (x, y, stangle, endangle, xradius, yradius)
          int x, y, stangle, endangle, xradius, yradius;

          Рисуется текущим цветом дуга эллипса с центром  в  точке

      (х, у), начальным углом stangle, конечным - endangle,  ради-

      усом по оси X xradius, по оси Y  yradius.  Изображение  дуги

      эллипса  не  поддержано  в  системе  команд КЦГД специальной

      escape-последовательностью, поэтому дуга моделируется  лини-

      ями с низкой скоростью.


          fillellipse (x, y, xradius, yradius)
          int x, y, xradius, yradius;

	  Рисуется закрашенный  текущим  цветом  полный  эллипс  с

      центром  в  точке (х,у), радиусом по оси Х xradius, по оси Y

      yradius.


          fillpoly (numpoints, polypoints)
          int numpoints; int *polypoints;

          Смысл параметров тот же, что и в процедуре drawpoly. Ри-

      суется закрашенный текущим цветом многоугольник.


          floodfill (x, y, border)
          int x, y, border;

          Процедура используется для  закрашивания  замкнутой  об-

      ласти цветом, заданным параметром border. Точка (х, у) явля-

      ется внутренней точкой области. Если точка  задана  вне  об-

      ласти,  то  заполняется внешняя ее часть. Закрашивание будет

      вестись вплоть до достижения границы с цветом border или  до

      границы поля вывода, если граница не встретилась.


          getarccoords (param)
          struct arccoordstype *param;

          Запрашиваются последние координаты функции arc  или  el-


                                 - 7 -


      lipse,  включающие  в  себя  центр (х, у), начальную позицию

      (xstart, ystart) и конечную позицию (xend, yend). Эти значе-

      ния  могут быть полезными, если надо провести линию от конца

      дуги.


          getaspectratio (xasp, yasp)
          int *xasp, *yasp;

          Функция возвращает коэффициенты растяжения  для  функций

      arc  или  circle  по осям х и у. По этим коэффициентам можно

      вычислить реальный коэффициент растяжения по оси у,  который

      будет равен отношению xasp/yasp.


          getbkcolor ( )

          Функция возвращает номер текущего цвета фона.


          getcolor ( )

          Функция возвращает номер текущего цвета.


          getlinesettings (lineinfo)
          struct linesettingstype *lineinfo;

          Функция возвращает текущий стиль и толщину линий,  уста-

      новленных процедурой  setlinestyle.


          getmaxcolor ( )

          Функция возвращает наивысший номер цвета, который  может

      быть передан в процедуру setcolor ( ).


          getmaxx ( )

          Функция возвращает максимальную координату по оси Х.


          getmaxy ( )

          Функция возвращает максимальную координату по оси Y.


          get_palette (palette)
          struct palettetype *palette;

          Функция возвращает текущую палитру и ее размер  в  пере-

      менную типа palettetype.


                                 - 8 -


	  getpalettesize ( )

	  Функция возвращает размер палитры определенной  по  таб-

      лице соответствия цветов параметрам. Для ДВК-4 это 16.


          getx ( )

          Функция возвращает х-координату текущего указателя.


          gety ( )

          Функция возвращает у-координату текущего указателя.


          gettextsettings (texttypeinfo)
          struct textsettingstype *texttypeinfo;

          Функция возвращает  в  переменную,  заданную  параметром

      направление текста, коэффициенты увеличения символов по осям

      х и у, признаки выравнивания по горизонтали и вертикали.


          getviewsettings (viewport)
          struct viewporttype *viewport;

          Функция возвращает текущее окно и  установку  отсечения,

      установленные процедурой setviewport.


          graphdefaults ( )

          Процедура устанавливает параметры  графики  в  начальное

      состояние.  Устанавливаются:

          - окно;

          - палитры;

          - цвет фона;

          - текущий цвет;

          - размер и направление символов;

          - направление и центровка строк;

          - режимы записи линий;

          - коэффициент удлинения окружностей и дуг.

          Процедура работает в графическом режиме.


                                 - 9 -


          graphresult ( )

	  Выдается результат последней графической  операции


          initgraph ( )

	  Процедура устанавливает графический режим и гасит курсор.


          line (xst, yst, xend, yend)
          int xst, yst, xend, yend;

          Рисуется прямая линия от точки (xst, yst) к точке (xend,

      yend).


          linerel (dx, dy)
          int dx, dy;

          Проводится прямая линия от текущего указателя  в  точку,

      которая  находится на расстоянии (dx, dy) от текущего указа-

      теля.


          lineto (x, y)

          Проводится прямая линия из точки,  в  которой  находится

      текущий указатель в точку (х, у).


          moverel (dx, dy)

          Перемещается текущий указатель в  точку,  которая  нахо-

      дится на расстоянии (dx, dy) относительно текущей позиции.


          moveto (x, y)

          Перемещается текущий указатель в точку (х, у)


          outchar (character, x, y, dir)
          int character, x, y, dir;

          Процедура выводит символ, заданный первым  параметром  в

      точку (х, у) с направлением dir.


          outtext (str)
          char str [ ];

          Посылается строка на устройство вывода в  позицию  теку-

      щего указателя.


                                 - 10 -


          out_textxy (x, y, str)
          int x, y; char str [ ];

	  Посылается строка на устройство вывода в точку (х,у).


          pieslice (x, y, stangle, endangle, radius)
          int x, y, stangle, endangle, radius;

          Рисуется сектор круга, закрашенный текущим цветом.


          putpixel (x, y)

          Рисуется текущим цветом пиксел в точке (х, у).


	  rectangle (left, bottom, right, top)
          int left, bottom, right, top;

          Рисуется текущим цветом прямоугольник с координатами ле-

      вого  нижнего угла (left, bottom) и правого верхнего (right,

      top).


          sector (x, y, stangle, endangle, xradius, yradius)
          int x, y, stangle, endangle, xradius, yradius;

          Рисуется текущим цветом эллиптический сектор.


          setallpalette (palette)
          struct palettetypе *palette;

          Изменяются все цвета палитры на указанные.


          setaspectratio (xasp, yasp)
          int xasp, yasp;

          Изменяется определенный по умолчанию коэффициент удлине-

      ния для окружностей и дуг по оси Y равный xasp/yasp.


          setbkcolor (color)
          int color;

          Устанавливается текущий цвет фона.


          setcolor (color)
          int color;

          Устанавливается текущий цвет изображения.


          setlinestyle (linestyle, thickness)
          int linestyle, thickness;

          Устанавливается текущий тип и толщина линии.


                                 - 11 -


          setpalette(colornum,color)
          int colornum, color;

          Процедура изменяет цвет, заданный первым  параметром  на

      палитру, заданную вторым параметром.


          settextjustify (horiz, vert)
          int horiz, vert;

          Устанавливаются значения выравнивания текста по горизон-

      тали и вертикали.


          set_textstyle (direction, charsizex, charsizey)
          int direction, charsizex, charsizey;

          Устанавливается текущее направление текста,  коэффициент

      увеличения символов по оси Х и по оси У.


          setviewport (left, bottom, right, top, clip)
          int left, bottom, right, top, clip;

          Устанавливается текущее поле вывода с  координатами  ле-

      вого  нижнего угла (left, bottom) и верхнего правого (right,

      top).Теперь отсчет координат будет вестись от левого нижнего

      угла  поля  вывода,а  не экрана.  Переменная clip определяет

      будут ли отсекаться изображения  на  границах  поля  вывода.

      Если  clip=TRUE,  то  отсечение производится, если FALSE, то

      нет.


          int mode;

          Устанавливается режим  записи  для  вычерчивания  линий.

      Если  mode=0, то делается наложение, если 1, то цвет линии и

      исходный цвет на экране взаимодействуют по правилу исключаю-

      щего или. В последнем режиме повторная выдача одной и той же

      линии гасит ее на экране.


	  textheight (str)
          char *str;

          Процедура возвращает высоту строки в пикселах.


                                 - 12 -


          textwidth (str)
          char *str;

          Процедура возвращает ширину строки в пикселах.



            3. Перечень нереализованных функций графического

                  пакета фирмы "Borland International"


          В графическом пакете для ДВК-4 остались нереализованными

      две  группы функций. Первая группа функций относится к наст-

      ройке  граф-пакета  на  конкретные  графические  устройства,

      драйверы,  режимы  их работ и получение информации о текущих

      устройствах, драйверах и  режимах.  Это  следующие  функции:

      detectgraph,  getdrivemane,  getgraphmode, getmodename, res-

      torectmode, setgraphmode, getmaxmode,  getmoderange.  Вторая

      группа  функций  не  реализуется  в  отсутствии битмэпа. Это

      функции: getfillpattern, getfillsettinds, getimage,  getpix-

      el, graphfreemem, graphgetmem, imagesize, installuserdriver,

      installuserfont,  putimage,  setactivepage,  setfillpattern,

      setfillstyle,  setgraphbufsize,  setusercharsize, setvisual-

      page.



		4. Трансляция   программ,  использующих
		      пакет   графических   функций.


	  Для  корректной  трансляции  таких  программ  необходимо:

      1) в каталоге /usr/include должен находиться файл  graphics.h;

      2) в каталоге /usr/lib - libgraph.a;

	  Таким  образом, в текст  программы  должна  быть включенa

      следующая  строка:

		#include  <graphics.h>


	   Команда  трансляции  выглядит  так:

	cc -o <вых.файл> -f <вх.файл> /usr/lib/libgraph.a -lm










